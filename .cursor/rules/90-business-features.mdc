---
description: Funcionalidades de negocio para sitios web de abogados: citas, portal de clientes, formularios, CRM.
globs: ["src/components/business/**", "src/pages/contacto.astro", "src/lib/business/**"]
alwaysApply: true
---

# /setup business - Funcionalidades de Negocio

## 1. Sistema de Citas Online

### AppointmentForm Component
```tsx
// src/components/business/AppointmentForm.tsx
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { appointmentFormSchema } from '@/lib/validations';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon } from 'lucide-react';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';

const services = [
  { value: 'consulta-general', label: 'Consulta General' },
  { value: 'derecho-laboral', label: 'Derecho Laboral' },
  { value: 'derecho-familiar', label: 'Derecho Familiar' },
  { value: 'derecho-penal', label: 'Derecho Penal' },
  { value: 'derecho-civil', label: 'Derecho Civil' },
  { value: 'derecho-comercial', label: 'Derecho Comercial' }
];

const timeSlots = [
  '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
  '14:00', '14:30', '15:00', '15:30', '16:00', '16:30'
];

export default function AppointmentForm() {
  const [selectedDate, setSelectedDate] = useState<Date>();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch
  } = useForm({
    resolver: zodResolver(appointmentFormSchema)
  });

  const onSubmit = async (data: any) => {
    setIsSubmitting(true);
    try {
      // Aquí iría la lógica para enviar la cita
      console.log('Datos de la cita:', data);
      // Simular envío
      await new Promise(resolve => setTimeout(resolve, 2000));
      alert('Cita solicitada correctamente. Te contactaremos pronto.');
    } catch (error) {
      console.error('Error al enviar cita:', error);
      alert('Error al enviar la solicitud. Inténtalo de nuevo.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">Nombre completo *</label>
          <Input
            {...register('name')}
            placeholder="Tu nombre completo"
            className={errors.name ? 'border-red-500' : ''}
          />
          {errors.name && (
            <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Email *</label>
          <Input
            type="email"
            {...register('email')}
            placeholder="tu@email.com"
            className={errors.email ? 'border-red-500' : ''}
          />
          {errors.email && (
            <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">Teléfono *</label>
          <Input
            type="tel"
            {...register('phone')}
            placeholder="+56 9 1234 5678"
            className={errors.phone ? 'border-red-500' : ''}
          />
          {errors.phone && (
            <p className="text-red-500 text-sm mt-1">{errors.phone.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Servicio *</label>
          <Select onValueChange={(value) => setValue('service', value)}>
            <SelectTrigger className={errors.service ? 'border-red-500' : ''}>
              <SelectValue placeholder="Selecciona un servicio" />
            </SelectTrigger>
            <SelectContent>
              {services.map((service) => (
                <SelectItem key={service.value} value={service.value}>
                  {service.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.service && (
            <p className="text-red-500 text-sm mt-1">{errors.service.message}</p>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-2">Fecha *</label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className={`w-full justify-start text-left font-normal ${
                  errors.date ? 'border-red-500' : ''
                }`}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {selectedDate ? format(selectedDate, 'PPP', { locale: es }) : 'Selecciona fecha'}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={(date) => {
                  setSelectedDate(date);
                  setValue('date', date?.toISOString() || '');
                }}
                disabled={(date) => date < new Date()}
                initialFocus
              />
            </PopoverContent>
          </Popover>
          {errors.date && (
            <p className="text-red-500 text-sm mt-1">{errors.date.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Hora *</label>
          <Select onValueChange={(value) => setValue('time', value)}>
            <SelectTrigger className={errors.time ? 'border-red-500' : ''}>
              <SelectValue placeholder="Selecciona hora" />
            </SelectTrigger>
            <SelectContent>
              {timeSlots.map((time) => (
                <SelectItem key={time} value={time}>
                  {time}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.time && (
            <p className="text-red-500 text-sm mt-1">{errors.time.message}</p>
          )}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Mensaje adicional</label>
        <Textarea
          {...register('message')}
          placeholder="Describe brevemente tu consulta..."
          rows={4}
        />
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox
          id="privacy"
          {...register('privacy')}
          className={errors.privacy ? 'border-red-500' : ''}
        />
        <label htmlFor="privacy" className="text-sm">
          Acepto la{' '}
          <a href="/legal/privacidad" className="text-primary-600 hover:underline">
            Política de Privacidad
          </a>{' '}
          y los{' '}
          <a href="/legal/terminos" className="text-primary-600 hover:underline">
            Términos de Servicio
          </a>
          *
        </label>
      </div>
      {errors.privacy && (
        <p className="text-red-500 text-sm">{errors.privacy.message}</p>
      )}

      <Button
        type="submit"
        className="w-full"
        disabled={isSubmitting}
      >
        {isSubmitting ? 'Enviando...' : 'Solicitar Cita'}
      </Button>
    </form>
  );
}
```

## 2. Portal de Clientes

### ClientPortal Component
```tsx
// src/components/business/ClientPortal.tsx
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FileText, Calendar, MessageSquare, Download } from 'lucide-react';

interface Case {
  id: string;
  title: string;
  status: 'active' | 'pending' | 'completed';
  lastUpdate: string;
  documents: Document[];
}

interface Document {
  id: string;
  name: string;
  type: string;
  uploadDate: string;
  size: string;
}

export default function ClientPortal() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [clientId, setClientId] = useState('');
  const [password, setPassword] = useState('');

  // Datos de ejemplo
  const cases: Case[] = [
    {
      id: '1',
      title: 'Caso Laboral - Despido Injustificado',
      status: 'active',
      lastUpdate: '2024-01-15',
      documents: [
        { id: '1', name: 'Contrato de Trabajo.pdf', type: 'PDF', uploadDate: '2024-01-10', size: '2.3 MB' },
        { id: '2', name: 'Carta de Despido.pdf', type: 'PDF', uploadDate: '2024-01-12', size: '1.1 MB' }
      ]
    }
  ];

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    // Aquí iría la lógica de autenticación
    if (clientId && password) {
      setIsAuthenticated(true);
    }
  };

  if (!isAuthenticated) {
    return (
      <Card className="max-w-md mx-auto">
        <CardHeader>
          <CardTitle>Acceso al Portal de Clientes</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">ID de Cliente</label>
              <Input
                value={clientId}
                onChange={(e) => setClientId(e.target.value)}
                placeholder="Ingresa tu ID de cliente"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Contraseña</label>
              <Input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Ingresa tu contraseña"
                required
              />
            </div>
            <Button type="submit" className="w-full">
              Acceder
            </Button>
          </form>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Portal de Clientes</h1>
        <p className="text-muted-foreground">Gestiona tus casos y documentos</p>
      </div>

      <Tabs defaultValue="cases" className="space-y-6">
        <TabsList>
          <TabsTrigger value="cases">Mis Casos</TabsTrigger>
          <TabsTrigger value="documents">Documentos</TabsTrigger>
          <TabsTrigger value="messages">Mensajes</TabsTrigger>
          <TabsTrigger value="appointments">Citas</TabsTrigger>
        </TabsList>

        <TabsContent value="cases" className="space-y-4">
          {cases.map((caseItem) => (
            <Card key={caseItem.id}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle>{caseItem.title}</CardTitle>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    caseItem.status === 'active' ? 'bg-green-100 text-green-800' :
                    caseItem.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {caseItem.status === 'active' ? 'Activo' :
                     caseItem.status === 'pending' ? 'Pendiente' : 'Completado'}
                  </span>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  Última actualización: {new Date(caseItem.lastUpdate).toLocaleDateString('es-ES')}
                </p>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">
                    <FileText className="h-4 w-4 mr-2" />
                    Ver Documentos
                  </Button>
                  <Button variant="outline" size="sm">
                    <MessageSquare className="h-4 w-4 mr-2" />
                    Enviar Mensaje
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        <TabsContent value="documents" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Documentos Compartidos</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {cases.flatMap(caseItem => caseItem.documents).map((doc) => (
                  <div key={doc.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <FileText className="h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">{doc.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {doc.type} • {doc.size} • {new Date(doc.uploadDate).toLocaleDateString('es-ES')}
                        </p>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      <Download className="h-4 w-4 mr-2" />
                      Descargar
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="messages" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Mensajes</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">No hay mensajes nuevos.</p>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="appointments" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Próximas Citas</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">No hay citas programadas.</p>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
```

## 3. Formulario de Contacto Avanzado

### ContactForm Component
```tsx
// src/components/business/ContactForm.tsx
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { contactFormSchema } from '@/lib/validations';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertCircle, CheckCircle, Phone, Mail, MapPin } from 'lucide-react';

const urgencyLevels = [
  { value: 'low', label: 'Baja - Puede esperar' },
  { value: 'medium', label: 'Media - En las próximas semanas' },
  { value: 'high', label: 'Alta - Urgente' },
  { value: 'emergency', label: 'Emergencia - Inmediato' }
];

const contactMethods = [
  { value: 'email', label: 'Email' },
  { value: 'phone', label: 'Teléfono' },
  { value: 'whatsapp', label: 'WhatsApp' },
  { value: 'any', label: 'Cualquiera' }
];

export default function ContactForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    reset
  } = useForm({
    resolver: zodResolver(contactFormSchema)
  });

  const onSubmit = async (data: any) => {
    setIsSubmitting(true);
    setSubmitStatus('idle');
    
    try {
      // Aquí iría la lógica para enviar el formulario
      console.log('Datos del formulario:', data);
      
      // Simular envío
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setSubmitStatus('success');
      reset();
    } catch (error) {
      console.error('Error al enviar formulario:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (submitStatus === 'success') {
    return (
      <Card className="max-w-2xl mx-auto">
        <CardContent className="pt-6">
          <div className="text-center space-y-4">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto" />
            <h3 className="text-2xl font-bold text-green-700">¡Mensaje Enviado!</h3>
            <p className="text-muted-foreground">
              Hemos recibido tu consulta. Te contactaremos en las próximas 24 horas.
            </p>
            <Button onClick={() => setSubmitStatus('idle')} variant="outline">
              Enviar Otro Mensaje
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Información de Contacto */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Información de Contacto</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-3">
                <Phone className="h-5 w-5 text-primary-600" />
                <div>
                  <p className="font-medium">Teléfono</p>
                  <p className="text-sm text-muted-foreground">+56 9 1234 5678</p>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <Mail className="h-5 w-5 text-primary-600" />
                <div>
                  <p className="font-medium">Email</p>
                  <p className="text-sm text-muted-foreground">contacto@abogado.com</p>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <MapPin className="h-5 w-5 text-primary-600" />
                <div>
                  <p className="font-medium">Dirección</p>
                  <p className="text-sm text-muted-foreground">
                    Av. Principal 123<br />
                    Santiago, Chile
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Horarios de Atención</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Lunes - Viernes</span>
                  <span>9:00 - 18:00</span>
                </div>
                <div className="flex justify-between">
                  <span>Sábados</span>
                  <span>9:00 - 13:00</span>
                </div>
                <div className="flex justify-between">
                  <span>Domingos</span>
                  <span>Cerrado</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Formulario */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Envíanos un Mensaje</CardTitle>
              <p className="text-sm text-muted-foreground">
                Completa el formulario y te contactaremos pronto.
              </p>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Nombre completo *</label>
                    <Input
                      {...register('name')}
                      placeholder="Tu nombre completo"
                      className={errors.name ? 'border-red-500' : ''}
                    />
                    {errors.name && (
                      <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Email *</label>
                    <Input
                      type="email"
                      {...register('email')}
                      placeholder="tu@email.com"
                      className={errors.email ? 'border-red-500' : ''}
                    />
                    {errors.email && (
                      <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Teléfono *</label>
                    <Input
                      type="tel"
                      {...register('phone')}
                      placeholder="+56 9 1234 5678"
                      className={errors.phone ? 'border-red-500' : ''}
                    />
                    {errors.phone && (
                      <p className="text-red-500 text-sm mt-1">{errors.phone.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Nivel de Urgencia</label>
                    <Select onValueChange={(value) => setValue('urgency', value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="Selecciona urgencia" />
                      </SelectTrigger>
                      <SelectContent>
                        {urgencyLevels.map((level) => (
                          <SelectItem key={level.value} value={level.value}>
                            {level.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Asunto *</label>
                  <Input
                    {...register('subject')}
                    placeholder="¿En qué podemos ayudarte?"
                    className={errors.subject ? 'border-red-500' : ''}
                  />
                  {errors.subject && (
                    <p className="text-red-500 text-sm mt-1">{errors.subject.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Mensaje *</label>
                  <Textarea
                    {...register('message')}
                    placeholder="Describe tu consulta legal..."
                    rows={6}
                    className={errors.message ? 'border-red-500' : ''}
                  />
                  {errors.message && (
                    <p className="text-red-500 text-sm mt-1">{errors.message.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Método de Contacto Preferido</label>
                  <Select onValueChange={(value) => setValue('contactMethod', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="¿Cómo prefieres que te contactemos?" />
                    </SelectTrigger>
                    <SelectContent>
                      {contactMethods.map((method) => (
                        <SelectItem key={method.value} value={method.value}>
                          {method.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="privacy"
                    {...register('privacy')}
                    className={errors.privacy ? 'border-red-500' : ''}
                  />
                  <label htmlFor="privacy" className="text-sm">
                    Acepto la{' '}
                    <a href="/legal/privacidad" className="text-primary-600 hover:underline">
                      Política de Privacidad
                    </a>{' '}
                    y los{' '}
                    <a href="/legal/terminos" className="text-primary-600 hover:underline">
                      Términos de Servicio
                    </a>
                    *
                  </label>
                </div>
                {errors.privacy && (
                  <p className="text-red-500 text-sm">{errors.privacy.message}</p>
                )}

                {submitStatus === 'error' && (
                  <div className="flex items-center space-x-2 text-red-600">
                    <AlertCircle className="h-4 w-4" />
                    <p className="text-sm">Error al enviar el mensaje. Inténtalo de nuevo.</p>
                  </div>
                )}

                <Button
                  type="submit"
                  className="w-full"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Enviando...' : 'Enviar Mensaje'}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
```

## 4. Integración con CRM

### CRM Integration
```typescript
// src/lib/crm.ts
interface Lead {
  id: string;
  name: string;
  email: string;
  phone: string;
  source: 'website' | 'referral' | 'social' | 'other';
  status: 'new' | 'contacted' | 'qualified' | 'converted' | 'lost';
  createdAt: Date;
  notes?: string;
}

interface Appointment {
  id: string;
  leadId: string;
  date: Date;
  time: string;
  service: string;
  status: 'scheduled' | 'confirmed' | 'completed' | 'cancelled';
  notes?: string;
}

export class CRMService {
  private apiUrl: string;
  private apiKey: string;

  constructor(apiUrl: string, apiKey: string) {
    this.apiUrl = apiUrl;
    this.apiKey = apiKey;
  }

  async createLead(lead: Omit<Lead, 'id' | 'createdAt'>): Promise<Lead> {
    const response = await fetch(`${this.apiUrl}/leads`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        ...lead,
        createdAt: new Date().toISOString()
      })
    });

    if (!response.ok) {
      throw new Error('Error al crear lead');
    }

    return response.json();
  }

  async createAppointment(appointment: Omit<Appointment, 'id'>): Promise<Appointment> {
    const response = await fetch(`${this.apiUrl}/appointments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify(appointment)
    });

    if (!response.ok) {
      throw new Error('Error al crear cita');
    }

    return response.json();
  }

  async getLeads(): Promise<Lead[]> {
    const response = await fetch(`${this.apiUrl}/leads`, {
      headers: {
        'Authorization': `Bearer ${this.apiKey}`
      }
    });

    if (!response.ok) {
      throw new Error('Error al obtener leads');
    }

    return response.json();
  }

  async updateLeadStatus(leadId: string, status: Lead['status']): Promise<void> {
    const response = await fetch(`${this.apiUrl}/leads/${leadId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({ status })
    });

    if (!response.ok) {
      throw new Error('Error al actualizar lead');
    }
  }
}
```

## 5. Notificaciones por Email

### Email Service
```typescript
// src/lib/email.ts
interface EmailTemplate {
  to: string;
  subject: string;
  template: string;
  data: Record<string, any>;
}

export class EmailService {
  private apiKey: string;
  private fromEmail: string;

  constructor(apiKey: string, fromEmail: string) {
    this.apiKey = apiKey;
    this.fromEmail = fromEmail;
  }

  async sendAppointmentConfirmation(appointment: any): Promise<void> {
    const template: EmailTemplate = {
      to: appointment.email,
      subject: 'Confirmación de Cita - Estudio Jurídico',
      template: 'appointment-confirmation',
      data: {
        name: appointment.name,
        date: appointment.date,
        time: appointment.time,
        service: appointment.service,
        lawyerName: 'Dr. Juan Pérez',
        officeAddress: 'Av. Principal 123, Santiago',
        phone: '+56 9 1234 5678'
      }
    };

    await this.sendEmail(template);
  }

  async sendContactConfirmation(contact: any): Promise<void> {
    const template: EmailTemplate = {
      to: contact.email,
      subject: 'Hemos recibido tu consulta - Estudio Jurídico',
      template: 'contact-confirmation',
      data: {
        name: contact.name,
        subject: contact.subject,
        estimatedResponse: '24 horas'
      }
    };

    await this.sendEmail(template);
  }

  private async sendEmail(template: EmailTemplate): Promise<void> {
    const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        service_id: 'service_xxxxx',
        template_id: template.template,
        user_id: this.apiKey,
        template_params: {
          to_email: template.to,
          from_name: 'Estudio Jurídico',
          from_email: this.fromEmail,
          subject: template.subject,
          ...template.data
        }
      })
    });

    if (!response.ok) {
      throw new Error('Error al enviar email');
    }
  }
}
```

## 6. Scripts de Implementación

```bash
# Crear estructura de negocio
mkdir -p src/components/business src/lib/business

# Crear componentes
touch src/components/business/{AppointmentForm,ContactForm,ClientPortal}.tsx

# Crear servicios
touch src/lib/business/{crm,email,notifications}.ts

# Instalar dependencias adicionales
pnpm add react-hook-form @hookform/resolvers zod date-fns
pnpm add @radix-ui/react-calendar @radix-ui/react-tabs
pnpm add lucide-react

# Verificar implementación
node scripts/check-business.mjs
```

## 7. Checklist de Funcionalidades

- [ ] Formulario de citas online implementado
- [ ] Portal de clientes básico funcionando
- [ ] Formulario de contacto avanzado
- [ ] Integración con CRM configurada
- [ ] Notificaciones por email funcionando
- [ ] Validación de formularios implementada
- [ ] Responsive design verificado
- [ ] Accesibilidad verificada