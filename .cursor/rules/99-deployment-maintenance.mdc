---
description: Deployment, mantenimiento y monitoreo del sitio web de abogados.
globs: ["scripts/**", "astro.config.mjs", "package.json", ".env*"]
alwaysApply: true
---

# /deploy - Deployment y Mantenimiento

## 1. Configuración de Deployment

### Vercel (Recomendado)
```json
// vercel.json
{
  "buildCommand": "pnpm build",
  "outputDirectory": "dist",
  "framework": "astro",
  "functions": {
    "src/pages/api/**/*.ts": {
      "runtime": "nodejs18.x"
    }
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        }
      ]
    }
  ],
  "redirects": [
    {
      "source": "/home",
      "destination": "/",
      "permanent": true
    }
  ]
}
```

### Netlify
```toml
# netlify.toml
[build]
  command = "pnpm build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/home"
  to = "/"
  status = 301

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

[[headers]]
  for = "/legal/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
```

### GitHub Pages
```yaml
# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build
        run: pnpm build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
```

## 2. Variables de Entorno

### .env.example
```bash
# Site Configuration
PUBLIC_SITE_URL=https://tu-dominio.com
PUBLIC_SITE_NAME="Estudio Jurídico Pérez"
PUBLIC_LAWYER_NAME="Dr. Juan Pérez"
PUBLIC_LAWYER_EMAIL=contacto@abogado.com
PUBLIC_LAWYER_PHONE="+56 9 1234 5678"
PUBLIC_OFFICE_ADDRESS="Av. Principal 123, Santiago"

# Analytics
PUBLIC_GA_ID=G-XXXXXXXXXX
PUBLIC_VERCEL_ANALYTICS_ID=prj_xxxxxxxxxx

# Email Service
EMAILJS_SERVICE_ID=service_xxxxx
EMAILJS_TEMPLATE_ID=template_xxxxx
EMAILJS_PUBLIC_KEY=xxxxxxxxxx

# CRM Integration
CRM_API_URL=https://api.crm.com
CRM_API_KEY=xxxxxxxxxx

# Security
SECRET_KEY=your-secret-key-here
```

### .env.local (No commitear)
```bash
# Configuración local de desarrollo
PUBLIC_SITE_URL=http://localhost:4321
PUBLIC_GA_ID=G-XXXXXXXXXX
EMAILJS_SERVICE_ID=service_xxxxx
EMAILJS_TEMPLATE_ID=template_xxxxx
EMAILJS_PUBLIC_KEY=xxxxxxxxxx
```

## 3. Scripts de Build y Deploy

### Package.json Scripts
```json
{
  "scripts": {
    "dev": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro",
    
    "check:contrast": "node scripts/contrast.mjs",
    "check:a11y": "pnpm dlx @axe-core/cli http://localhost:4321",
    "check:legal": "node scripts/check-legal.mjs",
    "check:business": "node scripts/check-business.mjs",
    "check:all": "pnpm check:contrast && pnpm check:a11y && pnpm check:legal && pnpm check:business",
    
    "lighthouse": "pnpm dlx lighthouse http://localhost:4321 --output=html --output-path=./lighthouse-report.html",
    "lighthouse:ci": "pnpm dlx @lhci/cli autorun",
    
    "test:build": "pnpm build && pnpm preview",
    "test:deploy": "pnpm build && pnpm dlx serve dist -p 3000",
    
    "deploy:vercel": "vercel --prod",
    "deploy:netlify": "netlify deploy --prod",
    "deploy:github": "gh-pages -d dist",
    
    "backup:content": "node scripts/backup-content.mjs",
    "backup:images": "node scripts/backup-images.mjs",
    "backup:all": "pnpm backup:content && pnpm backup:images",
    
    "update:deps": "pnpm update && pnpm audit fix",
    "clean": "rm -rf dist node_modules/.cache .astro",
    "fresh": "pnpm clean && pnpm install && pnpm build"
  }
}
```

## 4. Monitoreo y Analytics

### Google Analytics 4
```typescript
// src/lib/analytics.ts
export const GA_TRACKING_ID = import.meta.env.PUBLIC_GA_ID;

export const pageview = (url: string) => {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('config', GA_TRACKING_ID, {
      page_path: url,
    });
  }
};

export const event = ({ action, category, label, value }: {
  action: string;
  category: string;
  label?: string;
  value?: number;
}) => {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', action, {
      event_category: category,
      event_label: label,
      value: value,
    });
  }
};

// Eventos específicos para abogados
export const trackContactForm = () => {
  event({
    action: 'contact_form_submit',
    category: 'engagement',
    label: 'contact_form'
  });
};

export const trackAppointmentBooking = () => {
  event({
    action: 'appointment_booked',
    category: 'conversion',
    label: 'appointment'
  });
};

export const trackServiceView = (service: string) => {
  event({
    action: 'service_viewed',
    category: 'engagement',
    label: service
  });
};
```

### Vercel Analytics
```astro
---
// src/layouts/BaseLayout.astro
import { Analytics } from '@vercel/analytics/react';
---

<html lang="es">
  <head>
    <!-- ... otros meta tags ... -->
  </head>
  <body>
    <!-- ... contenido ... -->
    <Analytics />
  </body>
</html>
```

### Lighthouse CI
```json
// lighthouserc.json
{
  "ci": {
    "collect": {
      "numberOfRuns": 3,
      "url": ["http://localhost:4321"]
    },
    "assert": {
      "assertions": {
        "categories:performance": ["error", {"minScore": 0.9}],
        "categories:accessibility": ["error", {"minScore": 0.9}],
        "categories:best-practices": ["error", {"minScore": 0.9}],
        "categories:seo": ["error", {"minScore": 0.9}]
      }
    },
    "upload": {
      "target": "temporary-public-storage"
    }
  }
}
```

## 5. Scripts de Verificación

### Verificación de Contraste
```javascript
// scripts/contrast.mjs
import { readFileSync } from 'fs';
import { glob } from 'glob';

const colorPairs = [
  { foreground: '#0B1220', background: '#FFFFFF', context: 'texto principal' },
  { foreground: '#0E4A69', background: '#FFFFFF', context: 'enlaces' },
  { foreground: '#1FA5B8', background: '#FFFFFF', context: 'accent' },
  { foreground: '#475569', background: '#F4F6F8', context: 'texto secundario' }
];

function getLuminance(hex) {
  const rgb = parseInt(hex.slice(1), 16);
  const r = (rgb >> 16) & 0xff;
  const g = (rgb >> 8) & 0xff;
  const b = (rgb >> 0) & 0xff;
  
  const [rs, gs, bs] = [r, g, b].map(c => {
    c = c / 255;
    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  });
  
  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
}

function getContrastRatio(foreground, background) {
  const lum1 = getLuminance(foreground);
  const lum2 = getLuminance(background);
  const brightest = Math.max(lum1, lum2);
  const darkest = Math.min(lum1, lum2);
  return (brightest + 0.05) / (darkest + 0.05);
}

console.log('🔍 Verificando contraste de colores...\n');

let allPassed = true;

colorPairs.forEach(({ foreground, background, context }) => {
  const ratio = getContrastRatio(foreground, background);
  const passed = ratio >= 4.5;
  const status = passed ? '✅' : '❌';
  
  console.log(`${status} ${context}: ${ratio.toFixed(2)}:1 (${foreground} sobre ${background})`);
  
  if (!passed) {
    allPassed = false;
  }
});

if (allPassed) {
  console.log('\n✅ Todos los contrastes cumplen WCAG 2.2 AA');
  process.exit(0);
} else {
  console.log('\n❌ Algunos contrastes no cumplen WCAG 2.2 AA');
  process.exit(1);
}
```

### Verificación de Páginas Legales
```javascript
// scripts/check-legal.mjs
import { readFileSync, existsSync } from 'fs';
import { glob } from 'glob';

const requiredPages = [
  'src/pages/legal/privacidad.astro',
  'src/pages/legal/terminos.astro',
  'src/pages/legal/aviso-legal.astro'
];

const requiredComponents = [
  'src/components/legal/Disclaimer.tsx',
  'src/components/legal/PrivacyNotice.tsx'
];

const requiredContent = [
  'política de privacidad',
  'términos de servicio',
  'aviso legal',
  'disclaimer',
  'cookies'
];

console.log('🔍 Verificando compliance legal...\n');

let allPassed = true;

// Verificar páginas legales
console.log('📄 Verificando páginas legales:');
for (const page of requiredPages) {
  if (existsSync(page)) {
    console.log(`✅ ${page}`);
  } else {
    console.log(`❌ ${page} - FALTANTE`);
    allPassed = false;
  }
}

// Verificar componentes legales
console.log('\n🧩 Verificando componentes legales:');
for (const component of requiredComponents) {
  if (existsSync(component)) {
    console.log(`✅ ${component}`);
  } else {
    console.log(`❌ ${component} - FALTANTE`);
    allPassed = false;
  }
}

// Verificar contenido en páginas
console.log('\n📝 Verificando contenido legal:');
const pages = glob.sync('src/pages/**/*.astro');
let contentFound = 0;

for (const page of pages) {
  try {
    const content = readFileSync(page, 'utf-8').toLowerCase();
    const foundContent = requiredContent.filter(term => content.includes(term));
    if (foundContent.length > 0) {
      contentFound += foundContent.length;
      console.log(`✅ ${page}: ${foundContent.join(', ')}`);
    }
  } catch (error) {
    console.log(`⚠️ ${page}: Error al leer archivo`);
  }
}

if (contentFound < requiredContent.length) {
  console.log(`❌ Contenido legal insuficiente: ${contentFound}/${requiredContent.length}`);
  allPassed = false;
}

if (allPassed) {
  console.log('\n✅ Compliance legal verificado');
  process.exit(0);
} else {
  console.log('\n❌ Compliance legal incompleto');
  process.exit(1);
}
```

## 6. Backup y Recuperación

### Backup de Contenido
```javascript
// scripts/backup-content.mjs
import { readFileSync, writeFileSync, mkdirSync } from 'fs';
import { glob } from 'glob';

const backupDir = `backups/content-${new Date().toISOString().split('T')[0]}`;
mkdirSync(backupDir, { recursive: true });

console.log('💾 Creando backup de contenido...');

// Backup de páginas
const pages = glob.sync('src/pages/**/*.astro');
pages.forEach(page => {
  const content = readFileSync(page, 'utf-8');
  const backupPath = `${backupDir}/${page.replace('src/', '')}`;
  writeFileSync(backupPath, content);
  console.log(`✅ ${page}`);
});

// Backup de contenido
const contentFiles = glob.sync('src/content/**/*');
contentFiles.forEach(file => {
  const content = readFileSync(file, 'utf-8');
  const backupPath = `${backupDir}/${file.replace('src/', '')}`;
  writeFileSync(backupPath, content);
  console.log(`✅ ${file}`);
});

console.log(`\n✅ Backup completado en: ${backupDir}`);
```

## 7. Mantenimiento Regular

### Checklist Semanal
- [ ] Verificar que el sitio esté funcionando
- [ ] Revisar analytics y métricas
- [ ] Verificar formularios de contacto
- [ ] Comprobar enlaces rotos
- [ ] Revisar velocidad de carga
- [ ] Verificar SSL y seguridad

### Checklist Mensual
- [ ] Actualizar dependencias
- [ ] Revisar contenido y actualizar si es necesario
- [ ] Verificar backups
- [ ] Revisar métricas de SEO
- [ ] Actualizar políticas legales si es necesario
- [ ] Revisar testimonios y casos

### Checklist Trimestral
- [ ] Auditoría de seguridad completa
- [ ] Revisión de compliance legal
- [ ] Actualización de contenido del blog
- [ ] Revisión de estrategia SEO
- [ ] Backup completo del sitio
- [ ] Revisión de performance

## 8. Comandos de Deployment

```bash
# Desarrollo
pnpm dev

# Build y preview local
pnpm build && pnpm preview

# Verificaciones antes de deploy
pnpm check:all
pnpm lighthouse

# Deploy a producción
pnpm deploy:vercel
# o
pnpm deploy:netlify
# o
pnpm deploy:github

# Backup antes de cambios importantes
pnpm backup:all

# Limpieza y reinstalación
pnpm fresh
```

## 9. Monitoreo de Errores

### Error Tracking
```typescript
// src/lib/error-tracking.ts
export const trackError = (error: Error, context?: string) => {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', 'exception', {
      description: error.message,
      fatal: false,
      custom_map: {
        context: context || 'unknown'
      }
    });
  }
  
  // También enviar a servicio de monitoreo
  console.error('Error tracked:', error, context);
};
```

## 10. Checklist de Deployment

- [ ] Variables de entorno configuradas
- [ ] SSL/HTTPS funcionando
- [ ] Formularios de contacto probados
- [ ] Analytics configurado
- [ ] Páginas legales implementadas
- [ ] SEO optimizado
- [ ] Performance verificado
- [ ] Accesibilidad verificada
- [ ] Backup configurado
- [ ] Monitoreo de errores activo