---
alwaysApply: true
---

# Reglas de Componentes - MGM Abogados

## 游빌 Componentes de Servicio

### ServiceLayout.astro
```astro
---
import ServiceLayout from '../layouts/ServiceLayout.astro';
---

<ServiceLayout
  title="T칤tulo de la P치gina"
  description="Descripci칩n SEO"
  heroData={heroData}
  services={services}
  valuePropositions={valuePropositions}
  processSteps={processSteps}
  faqData={faqData}
  ctaData={ctaData}
>
  <!-- Contenido espec칤fico de la p치gina -->
</ServiceLayout>
```

### Props Requeridas
- `title`: string - T칤tulo de la p치gina
- `description`: string - Descripci칩n SEO
- `heroData`: object - Datos del hero section
- `services`: array - Array de servicios
- `valuePropositions`: array - Propuestas de valor
- `processSteps`: array - Pasos del proceso
- `faqData`: array - Preguntas frecuentes
- `ctaData`: object - Datos del CTA

## 游꿛 Componentes UI

### ServiceHero.astro
```astro
---
export interface Props {
  title: string;
  subtitle: string;
  description: string;
  image: string;
  ctaText: string;
  ctaLink: string;
}
---

<section class="hero-section">
  <div class="hero-content">
    <h1>{title}</h1>
    <p class="subtitle">{subtitle}</p>
    <p class="description">{description}</p>
    <a href={ctaLink} class="btn-primary">{ctaText}</a>
  </div>
  <div class="hero-image">
    <img src={image} alt={title} />
  </div>
</section>
```

### ServiceCard.astro
```astro
---
export interface Props {
  title: string;
  description: string;
  icon: string;
  duration?: string;
  price?: string;
  features: string[];
}
---

<div class="service-card">
  <div class="card-header">
    <Icon name={icon} />
    <h3>{title}</h3>
    {duration && <span class="badge">{duration}</span>}
  </div>
  <p class="description">{description}</p>
  <ul class="features">
    {features.map(feature => <li>{feature}</li>)}
  </ul>
  {price && <div class="price">{price}</div>}
</div>
```

### ProcessStep.astro
```astro
---
export interface Props {
  step: number;
  title: string;
  description: string;
  icon: string;
  duration?: string;
}
---

<div class="process-step">
  <div class="step-number">{step}</div>
  <div class="step-content">
    <Icon name={icon} />
    <h4>{title}</h4>
    <p>{description}</p>
    {duration && <span class="duration">{duration}</span>}
  </div>
</div>
```

## 游닇 Componentes de Formulario

### ContactForm.tsx
```tsx
interface ContactFormProps {
  serviceType?: string;
  urgency?: 'low' | 'medium' | 'high' | 'emergency';
  onSubmit: (data: FormData) => void;
}

export default function ContactForm({ 
  serviceType, 
  urgency, 
  onSubmit 
}: ContactFormProps) {
  // Implementaci칩n del formulario
}
```

### Props Requeridas
- `serviceType`: string - Tipo de servicio
- `urgency`: string - Nivel de urgencia
- `onSubmit`: function - Callback de env칤o

## 游꿢 Convenciones de Componentes

### Naming
- Componentes Astro: `PascalCase.astro`
- Componentes React: `PascalCase.tsx`
- Props interfaces: `ComponentNameProps`

### Props
- Usar interfaces TypeScript
- Documentar props complejas
- Usar valores por defecto cuando sea apropiado

### Estilos
- Usar clases Tailwind
- Mantener consistencia en espaciado
- Usar variables CSS para colores

## 游댃 Reutilizaci칩n

### Componentes Base
- `Button.astro` - Botones reutilizables
- `Card.astro` - Cards base
- `Icon.astro` - Iconos SVG
- `Badge.astro` - Badges de estado

### Composici칩n
- Usar componentes peque침os y espec칤ficos
- Componer componentes complejos
- Mantener responsabilidad 칰nica

## 游님 Responsive Design

### Breakpoints
```css
/* Mobile First */
.sm: 640px
.md: 768px
.lg: 1024px
.xl: 1280px
.2xl: 1536px
```

### Grid System
```astro
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  <!-- Contenido -->
</div>
```

## 游꿛 Estilos

### Clases Utilitarias
- Usar clases Tailwind existentes
- Crear clases personalizadas solo cuando sea necesario
- Mantener consistencia en espaciado

### Variables CSS
```css
:root {
  --primary: #1B365D;
  --secondary: #4A6B8A;
  --accent: #D4AF37;
}
```

## 游댌 Validaci칩n

### TypeScript
- Usar interfaces para props
- Validar tipos en tiempo de compilaci칩n
- Usar tipos estrictos

### Testing
- Probar componentes individualmente
- Verificar props requeridas
- Validar comportamiento responsive