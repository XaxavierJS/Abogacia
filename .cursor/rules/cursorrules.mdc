---
alwaysApply: true
---

# Reglas del Proyecto MGM Abogados

## üé® Paleta de Colores

### Colores Permitidos
- **Primary**: `primary-*` (azul marino profesional)
- **Secondary**: `secondary-*` (azul acero)  
- **Accent**: `accent-*` (dorado elegante)
- **Slate**: `slate-*` (grises neutros)
- **Success**: `success-*` (verdes para √©xito)
- **Warning**: `warning-*` (amarillos para advertencias)
- **Error**: `error-*` (rojos para errores)

### Colores Prohibidos
- ‚ùå `blue-*` ‚Üí usar `primary-*`
- ‚ùå `gray-*` ‚Üí usar `slate-*`
- ‚ùå `neutral-*` ‚Üí usar `slate-*`
- ‚ùå `green-*` ‚Üí usar `success-*`
- ‚ùå `red-*` ‚Üí usar `error-*`
- ‚ùå `yellow-*` ‚Üí usar `warning-*`

### Balance Recomendado
- **60-70%**: Slate colors (fondos, texto secundario)
- **20-25%**: Primary colors (botones, headers)
- **5-10%**: Accent colors (CTAs especiales)

## üèóÔ∏è Estructura de P√°ginas de Servicio

### Layout Obligatorio
- Todas las p√°ginas de servicio DEBEN usar `ServiceLayout.astro`
- Estructura requerida:
  ```astro
  ---
  import ServiceLayout from '../layouts/ServiceLayout.astro';
  ---
  <ServiceLayout>
    <!-- contenido espec√≠fico -->
  </ServiceLayout>
  ```

### Props Requeridas
- `title`: T√≠tulo de la p√°gina
- `description`: Descripci√≥n SEO
- `heroData`: Datos del hero section
- `services`: Array de servicios
- `valuePropositions`: Propuestas de valor
- `processSteps`: Pasos del proceso
- `faqData`: Preguntas frecuentes
- `ctaData`: Datos del CTA

### Bot√≥n de Chat Obligatorio
- Incluir SIEMPRE bot√≥n con `data-chat-open`
- Usar el sistema unificado en `BaseLayout.astro`

## üß© Componentes

### Componentes de Servicio
- `ServiceHero.astro`: Hero section con sidebar sticky
- `ServiceCard.astro`: Cards de servicios con badges
- `ProcessStep.astro`: Pasos del proceso con iconos
- `ServiceFAQ.astro`: Secci√≥n de FAQs
- `ValueProposition.astro`: Propuestas de valor

### Uso de Componentes
- Mantener props consistentes
- Usar TypeScript para componentes React
- Documentar props complejas con interfaces

## ‚ôø Accesibilidad (WCAG 2.1 AA)

### Im√°genes
- TODAS las im√°genes DEBEN tener `alt` text
- Usar descripciones descriptivas, no gen√©ricas

### Botones
- TODOS los botones DEBEN tener `aria-label` o `aria-describedby`
- Botones de icono requieren `aria-label`

### Enlaces
- Enlaces NO pueden estar vac√≠os
- Usar texto descriptivo en enlaces

### Contraste
- Contraste m√≠nimo 4.5:1 para texto normal
- Contraste m√≠nimo 3:1 para texto grande

## ü§ñ Chatbot

### Sistema Unificado
- Usar `data-chat-open` para botones que abren chat
- NO crear sistemas duplicados de event listeners
- Usar el sistema unificado en `BaseLayout.astro`

### Event Listeners
- NO duplicar l√≥gica de chatbot
- Usar el script unificado existente

## üìÅ Estructura de Archivos

### Importaciones
- Usar rutas relativas correctas:
  - Desde `src/layouts/`: `../lib/constants`
  - Desde `src/components/business/`: `../../lib/constants`
  - Desde `src/pages/`: `../lib/constants`

### Convenciones
- Archivos `.astro` para layouts y p√°ginas
- Archivos `.tsx` para componentes React interactivos
- Archivos `.ts` para utilidades y constantes

## üîç Validaci√≥n

### Scripts de Auditor√≠a
- `npm run audit:colors`: Verificar uso de colores
- `npm run audit:services`: Verificar p√°ginas de servicio
- `npm run validate`: Validaci√≥n general
- `npm run audit:all`: Ejecutar todas las auditor√≠as

### Pre-commit
- Ejecutar `npm run validate` antes de commits
- Corregir TODOS los errores antes de merge

## üö´ Prohibiciones

### Archivos
- NO crear p√°ginas de servicio fuera de la estructura est√°ndar
- NO usar colores no documentados
- NO duplicar l√≥gica de chatbot

### C√≥digo
- NO usar `any` en TypeScript
- NO crear componentes sin documentar props
- NO usar estilos inline (usar clases Tailwind)

## üìù Convenciones de C√≥digo

### TypeScript
- Usar interfaces para props complejas
- Mantener imports organizados
- Usar nombres descriptivos para variables

### Astro
- Usar `client:idle` para componentes no cr√≠ticos
- Usar `client:visible` para componentes lazy
- Usar `client:load` solo cuando sea necesario

### Tailwind
- Usar clases utilitarias
- Mantener consistencia en espaciado
- Usar variables CSS para colores personalizados

## üéØ Objetivos del Proyecto

### Consistencia
- Mantener dise√±o uniforme en todas las p√°ginas
- Usar componentes reutilizables
- Seguir la paleta de colores oficial

### Escalabilidad
- F√°cil agregar nuevas p√°ginas de servicio
- Componentes modulares y reutilizables
- Estructura clara y documentada

### Calidad
- C√≥digo limpio y bien documentado
- Accesibilidad WCAG 2.1 AA
- Performance optimizada